### Proje Açıklaması:
Bir **çağrı merkezi kalite yönetimi ve performans analiz sistemi** geliştiriyoruz. 
Bu proje, çağrı merkezi müşteri temsilcilerinin performansını değerlendirmek, kalite uzmanlarının çağrıları analiz etmesini sağlamak ve detaylı raporlama yapmak için **Django (Backend) ve PostgreSQL veritabanı** ile geliştirilecektir.  
Frontend için **Vue.js veya React** kullanılacaktır.  
Projeyi GitHub’da açık kaynak olarak yayınlayarak, topluluğun katkı sağlamasını istiyoruz.  

---

### 🏗️ **Adım 1: GitHub Uyumlu Proje Yapısını Oluştur**
Lütfen aşağıdaki dizin yapısını oluştur ve ilgili dosyaları ekle:

📂 call-center-quality-system/
│── 📂 backend/               # Django Backend API kodları
│   │── 📂 api/               # API uç noktaları
│   │── 📂 models/            # Veritabanı modelleri
│   │── 📂 tests/             # Test dosyaları
│   │── manage.py             # Django yönetim aracı
│   │── requirements.txt      # Gerekli Python paketleri
│── 📂 frontend/              # Vue.js veya React kodları
│   │── 📂 components/        # Arayüz bileşenleri
│   │── 📂 pages/             # Sayfa düzenleri
│   │── 📂 store/             # Global durum yönetimi (Vuex/Redux)
│   │── package.json          # Frontend bağımlılıkları
│── 📂 docs/                  # API belgeleri ve kullanım rehberi
│── .gitignore                # Gereksiz dosyaları dışarıda bırakma
│── README.md                 # Proje hakkında temel bilgiler
│── LICENSE                   # Açık kaynak lisansı
│── CONTRIBUTING.md            # Katkıda bulunma rehberi
│── CODE_OF_CONDUCT.md         # Topluluk kuralları
│── .env.example               # Örnek çevresel değişkenler
│── .github/  
│   │── ISSUE_TEMPLATE.md     # GitHub Issue şablonları
│   │── PULL_REQUEST_TEMPLATE.md  # PR şablonları
│   │── workflows/            # CI/CD için GitHub Actions

---

### ⚙️ **Adım 2: Django Backend API ve Veritabanı Şemasını Hazırla**
Lütfen aşağıdaki Django modellerini ve ilişkileri oluştur:

```python
from django.db import models
from django.contrib.auth.models import AbstractUser

# Kullanıcı Modeli
class User(AbstractUser):
    ROLE_CHOICES = [
        ('expert', 'Kalite Uzmanı'),
        ('agent', 'Müşteri Temsilcisi'),
        ('admin', 'Yönetici')
    ]
    role = models.CharField(max_length=10, choices=ROLE_CHOICES)

# Çağrı Kayıtları
class Call(models.Model):
    agent = models.ForeignKey(User, on_delete=models.CASCADE, related_name="calls")
    call_date = models.DateTimeField()
    phone_number = models.CharField(max_length=20)
    mp3_file = models.FileField(upload_to="call_records/")
    queue = models.CharField(max_length=50)

# Değerlendirme Formu
class Evaluation(models.Model):
    call = models.OneToOneField(Call, on_delete=models.CASCADE, related_name="evaluation")
    evaluator = models.ForeignKey(User, on_delete=models.CASCADE)
    scores = models.JSONField()  # Puanların JSON formatında saklanması
    comments = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
